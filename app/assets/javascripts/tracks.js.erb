// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.

var mft_k = 3.280839895;

var in_imperial,

    charts_data,

    max_height,
    min_height,

    range_from,
    range_to,

    index_cache = [];

function updateRangeSelector() {
  if (in_imperial) {
    $('#range-selector').ionRangeSlider('update', {
      min: Math.round(max_height * mft_k),
      from: Math.round(range_from * mft_k),
      to: Math.round(range_to * mft_k) });
  } else {
    $('#range-selector').ionRangeSlider('update', {
      min: max_height,
      from: range_from,
      to: range_to });
  }
}

function syncTooltip(container_id, x) {

  var index = index_cache.indexOf(x);
  var chart, p, p1;

  if (container_id !== 'glideratio_chart') {
    chart = $('#glideratio_chart').highcharts();
    p = chart.series[0].data[index];
    chart.tooltip.refresh(p);
    chart.xAxis[0].drawCrosshair({ chartX: p.plotX, chartY: p.plotY}, p);
  }

  if (container_id !== 'speeds_chart') {
    chart = $('#speeds_chart').highcharts();
    p1 = chart.series[0].data[index];
    chart.tooltip.refresh([p1, chart.series[1].data[index]]);
    chart.xAxis[0].drawCrosshair({ chartX: p1.plotX, chartY: p1.plotY}, p1);
  }

  if (container_id !== 'elevation_distance_chart') {
    chart = $('#elevation_distance_chart').highcharts();
    p1 = chart.series[0].data[index];
    chart.tooltip.refresh([p1, chart.series[1].data[index], chart.series[2].data[index]]);
    chart.xAxis[0].drawCrosshair({ chartX: p1.plotX, chartY: p1.plotY}, p1);
  }

}

function init_view_type() {
  var view_type = $.cookie('view_type');
  if (view_type == 'single') {
    $('#li_toggle_single').addClass('active');
    $('#single-chart').show();
    $('#multiple-charts').hide();
  } else {
    $('#li_toggle_multi').addClass('active');
    $('#single-chart').hide();
    $('#multiple-charts').show();
  }
}

function init_units() {
  var units = $.cookie('units');
  if (units == 'imperial') {
    $('#li_toggle_imperial').addClass('active');
    in_imperial = true;
  } else {
    $('#li_toggle_metric').addClass('active');
    in_imperial = false;
  }
}

function init_objects() {

  $('#toggle_multi').click(function (e) {
    e.preventDefault();

    $('#li_toggle_single').removeClass('active');
    $('#li_toggle_multi').addClass('active');

    $('#single-chart').hide();
    $('#multiple-charts').show();
    set_chart_data();
    $.cookie('view_type', 'multi', { expires: 365, path: '/' });
  });

  $('#toggle_single').click(function (e) {
    e.preventDefault();

    $('#li_toggle_single').addClass('active');
    $('#li_toggle_multi').removeClass('active');

    $('#multiple-charts').hide();
    $('#single-chart').show();
    set_chart_data();
    $.cookie('view_type', 'single', { expires: 365, path: '/' });
  });

  $('#toggle_metric').click(function (e) {
    e.preventDefault();

    var li_toggle_metric = $('#li_toggle_metric');
    var li_toggle_imperial = $('#li_toggle_imperial');

    if (li_toggle_metric.hasClass('active'))
      return;

    li_toggle_metric.addClass('active');
    li_toggle_imperial.removeClass('active');

    in_imperial = false;

    updateRangeSelector();
    updateUnits();
    set_chart_data();
    $.cookie('units', 'metric', { expires: 365, path: '/' });
  });

  $('#toggle_imperial').click(function (e) {
    e.preventDefault();

    var li_toggle_metric = $('#li_toggle_metric');
    var li_toggle_imperial = $('#li_toggle_imperial');

    if (li_toggle_imperial.hasClass('active'))
      return;

    li_toggle_metric.removeClass('active');
    li_toggle_imperial.addClass('active');

    in_imperial = true;

    updateRangeSelector();
    updateUnits();
    set_chart_data();
    $.cookie('units', 'imperial', { expires: 365, path: '/'});
  });

  $('#range-from, #range-to').keypress(function (e) {
    //if the letter is not digit then display error and don't type anything
    if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
      return false;
    }
  });

  $('#range-edit-button').click(function (){
    var k = (in_imperial ? mft_k : 1);
    $('#range-from').val(Math.round(range_from * k));
    $('#range-to').val(Math.round(range_to * k));
  });

  $('#edit-range').on('shown.bs.modal', function () {
    $('#range-from').focus();
  });

  $('#range-from').keydown(function (e) {
    if (e.which == 9 || e.which == 13) {
      $('#range-to').focus();
      e.preventDefault();
    }
  });

  $('#range-to').keydown(function (e) {
    if (e.which == 9 || e.which == 13) {
      $('#apply-new-range').focus();
      e.preventDefault();
    }
  });

  $('#apply-new-range').click(function () {
    var tmp_range_from = $('#range-from').val();
    var tmp_range_to = $('#range-to').val();

    var k = (in_imperial ? mft_k : 1);

    if (tmp_range_from > max_height * k)
      tmp_range_from = Math.round(max_height * k);

    if (tmp_range_to < min_height * k)
      tmp_range_to = Math.round(min_height * k);

    range_from = tmp_range_from / k;
    range_to = tmp_range_to / k;

    updateRangeSelector();

    window.history.replaceState({}, document.title, "?f=" + range_from + "&t=" + range_to);
    set_chart_data();

  });

}

function show_track_on_document_ready() {

  init_units();
  init_view_type();

  init_objects();

  set_chart_data();
  updateRangeSelector();
  updateUnits();
}