- provide :title, title(@track)

:javascript

  function set_chart_data() {

    var dist_data = [],
        elev_data = [],
        heights_data = [],
        h_speed = [],
        v_speed = [],
        gr = [],
        raw_h_speed = [],
        raw_v_speed = [],
        raw_gr = [],

        min_h_speed = 0,
        max_h_speed = 0,

        min_v_speed = 0,
        max_v_speed = 0,

        min_gr = 0,
        max_gr = 0,

        fl_time = 0,
        dist = 0,
        elev = 0,

        mft_un_k = 1,
        km_m_k = 1;

    if (in_imperial) {
      mft_un_k = mft_k;
      km_m_k = 1.6093;
    }

    var max_val = typeof range_from !== 'undefined' ? range_from : 100000;
    var min_val = typeof range_to !== 'undefined' ? range_to : 0;

    index_cache = [];

    var isFirst = true,
        isLast = false;

    for (var index in charts_data) {

      var current_point = charts_data[index];
      var point = {};

      isLast = true;

      if (current_point.elevation <= max_val && current_point.elevation >= min_val) {

        point = clone(current_point);

        // Корректировка выбранного диапазона
        if (isFirst) {

          isFirst = false;
          if (current_point.elevation != max_val && charts_data.hasOwnProperty(index-1)) {

            point.elevation_diff = max_val - current_point.elevation;

            var k = point.elevation_diff / current_point.elevation_diff;

            point.distance = Math.round(current_point.distance * k);
            point.fl_time = Math.round(current_point.fl_time * k * 10) / 10;

          }
        }

        isLast = false;

        dist += point.distance;
        elev += point.elevation_diff;

        elev_data.push([fl_time, Math.round(elev * mft_un_k)]);
        dist_data.push([fl_time, Math.round(dist * mft_un_k)]);
        h_speed.push([fl_time, Math.round(point.h_speed / km_m_k)]);
        v_speed.push([fl_time, Math.round(point.v_speed / km_m_k)]);
        heights_data.push([fl_time, Math.round(point.elevation * mft_un_k)]);
        index_cache.push(fl_time);

        gr.push([fl_time, point.glrat]);

        raw_h_speed.push([fl_time, point.raw_h_speed]);
        raw_v_speed.push([fl_time, point.raw_v_speed]);
        raw_gr.push([fl_time, point.raw_gr]);

        fl_time += Math.round(point.fl_time * 10) / 10;

        min_h_speed = min_h_speed == 0 || min_h_speed > point.h_speed ? point.h_speed : min_h_speed;
        max_h_speed = max_h_speed == 0 || max_h_speed < point.h_speed ? point.h_speed : max_h_speed;

        min_v_speed = min_v_speed == 0 || min_v_speed > point.v_speed ? point.v_speed : min_v_speed;
        max_v_speed = max_v_speed == 0 || max_v_speed < point.v_speed ? point.v_speed : max_v_speed;

        min_gr = min_gr == 0 || min_gr == null || min_gr > point.glrat ? point.glrat : min_gr;
        max_gr = max_gr == 0 || max_gr == null || max_gr < point.glrat ? point.glrat : max_gr;
      }

      if (isLast && elev_data.length > 0) {
        if (current_point.elevation <= min_val && charts_data.hasOwnProperty(index - 1)) {

          point = clone(current_point);
          prev_point = charts_data[index - 1];

          point.elevation_diff = prev_point.elevation - min_val;
          var k = point.elevation_diff / current_point.elevation_diff;

          point.fl_time = current_point.fl_time * k;
          point.elevation = min_val;
          point.distance = Math.round(current_point.distance * k);

          dist += point.distance;
          elev += point.elevation_diff;
          fl_time += Math.round(point.fl_time * 10) / 10;

          elev_data.push([fl_time, Math.round(elev * mft_un_k)]);
          dist_data.push([fl_time, Math.round(dist * mft_un_k)]);
          h_speed.push([fl_time, Math.round(point.h_speed / km_m_k)]);
          v_speed.push([fl_time, Math.round(point.v_speed / km_m_k)]);
          heights_data.push([fl_time, Math.round(point.elevation * mft_un_k)]);
          index_cache.push(fl_time);

          gr.push([fl_time, point.glrat]);

          raw_h_speed.push([fl_time, point.raw_h_speed]);
          raw_v_speed.push([fl_time, point.raw_v_speed]);
          raw_gr.push([fl_time, point.raw_gr]);

        }
        break;
      }
    }

    var all_data_chart = $('#all_data_chart');
    var display_multiple_charts = $('#multiple-charts').css('display') !== 'none';
    var display_all_data_chart = all_data_chart.css('display') !== 'none';

    if (display_multiple_charts) {
      var ed_chart = $('#elevation_distance_chart').highcharts();
      ed_chart.series[0].setData(elev_data, false);
      ed_chart.series[1].setData(dist_data, false);
      ed_chart.series[2].setData(heights_data, false);
      ed_chart.redraw();
    }

    if (display_multiple_charts) {
      var sp_chart = $('#speeds_chart').highcharts();
      sp_chart.series[0].setData(h_speed, false);
      sp_chart.series[1].setData(v_speed, false);
      sp_chart.series[2].setData(raw_h_speed, false);
      sp_chart.series[3].setData(raw_v_speed, false);
      sp_chart.redraw();
    }

    if (display_multiple_charts) {
      var gr_chart = $('#glideratio_chart').highcharts();
      gr_chart.series[0].setData(gr, false);
      gr_chart.series[1].setData(raw_gr, false);
      gr_chart.redraw();
    }

    if (display_all_data_chart) {
      var ad_chart = all_data_chart.highcharts();
      ad_chart.series[0].setData(h_speed, false);
      ad_chart.series[1].setData(v_speed, false);
      ad_chart.series[2].setData(gr, false);
      ad_chart.series[3].setData(heights_data, false);
      ad_chart.series[4].setData(dist_data, false);
      ad_chart.series[5].setData(elev_data, false);
      ad_chart.redraw();
    }

    if (in_imperial){
      $('#dd_distance').text(Math.round(dist * mft_k) + ' ' + #{t 'units.ft_html' });
      $('#dd_elevation').text((elev * mft_k).toFixed(0) + ' ' + #{t 'units.ft_html'});
    } else {
      $('#dd_distance').text(dist.toFixed(0) + ' ' + #{t 'units.m_html'});
      $('#dd_elevation').text(elev.toFixed(0) + ' ' + #{t 'units.m_html'});
    }
    $('#dd_fl_time').text(fl_time.toFixed(1) + ' ' + #{t 'units.t_html'});

    $('#p_min_v_speed').text((min_v_speed / km_m_k).toFixed(0));
    $('#p_max_v_speed').text((max_v_speed / km_m_k).toFixed(0));
    $('#p_avg_v_speed').text(Math.round((elev / fl_time * 3.6) / km_m_k).toString());

    $('#p_min_h_speed').text((min_h_speed / km_m_k).toFixed(0));
    $('#p_max_h_speed').text((max_h_speed / km_m_k).toFixed(0));
    $('#p_avg_h_speed').text(Math.round((dist / fl_time * 3.6) / km_m_k).toString());

    $('#p_min_gr').text(min_gr.toFixed(2));
    $('#p_max_gr').text(max_gr.toFixed(2));
    $('#p_avg_gr').text((dist / elev).toFixed(2));

  }
  $(function() {

    // Массив хэшей содержащий данные трека
    charts_data = #{@track.charts_data};
    // Максимальная высота трека
    max_height = #{@track.max_height};
    min_height = #{@track.min_height};

    var param_from = #{params[:f].nil? ? -1 : params[:f]};
    var param_to = #{params[:t].nil? ? -1 : params[:t]};

    if (param_from <= param_to || param_from > max_height || param_to >= max_height) {
      param_from = -1;
      param_to = -1;
    }

    if (param_to < min_height) {
      param_to = -1;
    }

    range_from = param_from == -1 ? max_height : param_from;
    range_to = param_to == -1 ? min_height : param_to;

    $(document).ready(function() {

      $("#range-selector").ionRangeSlider({
        min: max_height,
        max: min_height,
        type: 'double',
        step: 50,
        prettify: false,
        hasGrid: true,
        from: max_height,
        to: min_height,
        onFinish: function (obj) {      // callback is called on slider action is finished
          if (in_imperial) {
            range_from = obj.fromNumber / mft_k;
            range_to = obj.toNumber / mft_k;
          } else {
            range_from = obj.fromNumber;
            range_to = obj.toNumber;
          }
          window.history.replaceState({}, document.title, "?f=" + range_from + "&t=" + range_to);
          set_chart_data();
        }
      });

      $('#elevation_distance_chart').highcharts({
          chart: {
            type: 'spline',
            marginLeft: 70
          },
          title: {
            text: #{t 'tracks.show.eldstch_html'}
          },
          plotOptions: {
            spline: {
              marker: {
                enabled: false
              }
            },
            area: {
              marker: {
                enabled: false
              }
            },
            series: {
              marker: {
                radius: 1
              },
              point: {
                events: {
                  mouseOver: function() {
                    syncTooltip('elevation_distance_chart', this.x);
                  }
                }
              }
            }
          },
          yAxis: {
            min: 0,
            title: {
              text: ''
            }
          },
          tooltip: {
            shared: true,
            crosshairs: true
          },
          credits: {
            enabled: false
          },
          series: [{
            name: #{t 'tracks.show.eldst_el_s_html'},
            pointInterval: 10,
            tooltip: {
              valueSuffix: ''
            }
          },
            {
              name: #{t 'tracks.show.eldst_dst_s_html'},
              pointInterval: 10,
              tooltip: {
                valueSuffix: ''
              }
            },
            {
              name: #{t 'tracks.show.eldst_h_s_html'},
              type: 'area',
              fillOpacity: 0.3,
              color: Highcharts.getOptions().colors[0],
              lineWidth: 1,
              tooltip: {
                valueSuffix: ''
              }
            }]
        });

        $('#speeds_chart').highcharts({
          chart: {
            type: 'spline',
            marginLeft: 70
          },
          title: {
            text: #{t 'tracks.show.spdch_html'}
          },
          plotOptions: {
            spline: {
              marker: {
                enabled: false
              }
            },
            series: {
              marker: {
                radius: 1
              },
              point: {
                events: {
                  mouseOver: function() {
                    syncTooltip('speeds_chart', this.x);
                  }
                }
              }
            }
          },
          yAxis: [{ //Speed yAxis
            min: 0,
            labels: {
              style: {
                color: Highcharts.getOptions().colors[1]
              }
            },
            title: {
              text: '',
              style: {
                color: Highcharts.getOptions().colors[1]
              }
            }
          }],
          tooltip: {
            shared: true,
            crosshairs: true,
            valueDecimals: 0
          },
          credits: {
            enabled: false
          },
          series:
          [
            {
              name: #{t 'tracks.show.spd_hs_html'},
              color: '#52A964',
              tooltip: {
                valueSuffix: ''
              }
            },
            {
              name: #{t 'tracks.show.spd_vs_html'},
              color: '#A7414E',
              tooltip: {
                valueSuffix: ''
              }
            },
            {
              name: #{t 'tracks.show.raw_ground_speed'},
              type: 'line',
              color: '#AAE3CC',
              enableMouseTracking: false,
              lineWidth: 7,
              visible: false,
              tooltip: {
                valueSuffix: ''
              }
            },
            {
              name: #{t 'tracks.show.raw_vertical_speed'},
              type: 'line',
              color: '#DFAFAD',
              enableMouseTracking: false,
              lineWidth: 7,
              visible: false,
              tooltip: {
                valueSuffix: ''
              }
            }
          ]
        });

        $('#glideratio_chart').highcharts({
          chart: {
            type: 'spline',
            marginLeft: 70
          },
          title: {
            text: #{t 'tracks.show.grch_html'}
          },
          plotOptions: {
            spline: {
              marker: {
                enabled: false
              }
            },
            series: {
              marker: {
                radius: 1
              },
              point: {
                events: {
                  mouseOver: function() {
                    syncTooltip('glideratio_chart', this.x);
                  }
                }
              }
            }
          },
          tooltip: {
            crosshairs: true,
            valueDecimals: 2
          },
          yAxis: {
            min: 0,
            title: {
              text: ' '
            }
          },
          credits: {
            enabled: false
          },
          series: [
            {
              name: #{t 'tracks.show.gr_s_html'},
              color: '#37889B',
              tooltip: {
                valueSuffix: ''
              },
              zIndex: 2
            },
            {
              name: #{t 'tracks.show.raw_gr'},
              type: 'line',
              color: '#A6CDCE',
              lineWidth: 7,
              enableMouseTracking: false,
              zIndex: 1,
              visible: false
            }
          ]
        });

        $('#all_data_chart').highcharts({
          chart: {
            type: 'spline'
          },
          title: {
            text: #{t 'tracks.show.adc_html'}
          },
          plotOptions: {
            spline: {
              marker: {
                enabled: false
              }
            },
            series: {
              marker: {
                radius: 1
              }
            }
          },
          yAxis: [{ //Speed yAxis
            min: 0,
            title: {
              text: #{t 'tracks.show.adc_html'}
            }
          },
            { // Elev, dist yAxis
              min: 0,
              title: {
                text: #{t 'tracks.show.adc_ed_y_html'}
              },
              opposite: true
            },
            { // GR yAxis
              min: 0,
              max: 5,
              tickInterval: 0.5,
              title: {
                text: #{t 'tracks.show.adc_gr_y_html'}
              },
              opposite: true
            }
          ],
          tooltip: {
            shared: true,
            crosshairs: true
          },
          credits: {
            enabled: false
          },
          series:
          [
            {
            name: #{t 'tracks.show.adc_hspd_html'},
            yAxis: 0,
            color: Highcharts.getOptions().colors[2],
            tooltip: {
              valueSuffix: '',
              valueDecimals: 0
            }
          },
            {
              name: #{t 'tracks.show.adc_vspd_html'},
              yAxis: 0,
              color: Highcharts.getOptions().colors[0],
              tooltip: {
                valueSuffix: '',
                valueDecimals: 0
              }
            },
            {
              name: #{t 'tracks.show.adc_gr_s_html'},
              yAxis: 2,
              color: Highcharts.getOptions().colors[1],
              tooltip: {
                valueSuffix: '',
                valueDecimals: 2
              }
            },
            {
              name: #{t 'tracks.show.adc_h_s_html'},
              yAxis: 1,
              color: '#aaa',
              tooltip: {
                valueSuffix: '',
                valueDecimals: 0
              }
            },
            {
              name: #{t 'tracks.show.adc_dst_html'},
              yAxis: 1,
              color: Highcharts.getOptions().colors[5],
              tooltip: {
                valueSuffix: '',
                valueDecimals: 0
              }
            },
            {
              name: #{t 'tracks.show.adc_ele_html'},
              yAxis: 1,
              color: Highcharts.getOptions().colors[3],
              tooltip: {
                valueSuffix: '',
                valueDecimals: 0
              }
            }
          ]
        });
     show_track_on_document_ready();

    });

  });

  function updateUnits() {

    var chart;
    var speed_unit = (in_imperial ? #{t 'units.mph_html'} : #{t 'units.kmh_html'});
    var dist_unit = (in_imperial ? #{t 'units.ft_html'} : #{t 'units.m_html'});


    $('.val-unit').text(speed_unit);

    // elevation/distance chart
    chart = $('#elevation_distance_chart').highcharts();
    chart.yAxis[0].update({
      title: {
        text: #{t 'tracks.show.eldst_dst_html'} + ', ' + dist_unit
      }
    });
    chart.series[0].update({
      tooltip: {
        valueSuffix: ' ' + dist_unit
      }
    });
    chart.series[1].update({
      tooltip: {
        valueSuffix: ' ' + dist_unit
      }
    });
    chart.series[2].update({
      tooltip: {
        valueSuffix: ' ' + dist_unit
      }
    });

    // speeds chart
    chart = $('#speeds_chart').highcharts();
    chart.yAxis[0].update({
      title: {
        text: #{t 'tracks.show.spd_ax_html'} + ', ' + speed_unit
      }
    });
    chart.series[0].update({
      tooltip: {
        valueSuffix: ' ' + speed_unit
      }
    });
    chart.series[1].update({
      tooltip: {
        valueSuffix: ' ' + speed_unit
      }
    });

    chart = $('#all_data_chart').highcharts();
    chart.yAxis[0].update({
      title: {
        text: #{I18n.t 'tracks.show.adc_sp_y_html'} + ', ' + (in_imperial ? #{I18n.t 'units.mph_html'} : #{t 'units.kmh_html'})
      }
    });
    chart.yAxis[1].update({
      title: {
        text: #{t 'tracks.show.adc_ed_y_html'} + ', ' + (in_imperial ? #{t 'units.ft_html'}  : #{t 'units.m_html'})
      }
    });
    chart.series[0].update({
      tooltip: {
        valueSuffix: ' ' + speed_unit
      }
    });
    chart.series[1].update({
      tooltip: {
        valueSuffix: ' ' + speed_unit
      }
    });
    chart.series[3].update({
      tooltip: {
        valueSuffix: ' ' + dist_unit
      }
    });
    chart.series[4].update({
      tooltip: {
        valueSuffix: ' ' + dist_unit
      }
    });
    chart.series[5].update({
      tooltip: {
        valueSuffix: ' ' + dist_unit
      }
    });

  }

.container
  .page-header
    .row
      .col-md-8
        %h1
          =header @track
          %small
            =subheader @track

      .dropdown-container.col-md-4
        .pull-right
          - if @track.ge_enabled
            %a.btn.btn-default{:href => google_earth_track_path(@track), :target => '_blank'}
              %i.fa.fa-compass
              = 'Google earth'
          %a.btn.btn-default{:href => google_maps_track_path(@track), :target => '_blank'}
            %i.fa.fa-compass
            = 'Google maps'
          -#- if @track.has_video
          -#  %a.btn.btn-default{:href => replay_track_path(@track), :target => '_blank'}
          -#    %i.fa.fa-video-camera
          -#    = 'Video replay'

          %button.btn.btn-default.dropdown-toggle#dropdownMenu1{:type => 'button', :data => {:toggle => 'dropdown'}}
            %i.fa.fa-cog
          %ul.dropdown-menu.dropdown-menu-right{:role => 'menu', :aria => {:labelledby => 'dropdownMenu1'}}
            %li.dropdown-header{:role => 'presentation'}=t '.menu_header'
            %li#li_toggle_multi{:role => 'presentation'}
              %a#toggle_multi{:role => 'menuitem', :tabindex => '-1', :href=>'#'}=t '.menu_sep'
            %li#li_toggle_single{:role => 'presentation'}
              %a#toggle_single{:role => 'menuitem', :tabindex => '-1', :href => '#'}=t '.menu_one'
            %li.dropdown-header{:role => 'presentation'}=t '.units_header'
            %li#li_toggle_metric{:role => 'presentation'}
              %a#toggle_metric{:role => 'menuitem', :tabindex => '-1', :href => '#'}=t '.m_units_metric'
            %li#li_toggle_imperial{:role => 'presentation'}
              %a#toggle_imperial{:role => 'menuitem', :tabindex => '-1', :href => '#'}=t '.m_units_imperial'
            - if user_signed_in? && (current_user == @track.user || (can? :update, :tracks))
              %li.dropdown-header{:role => 'presentation'}= t('tracks.show.manage')
              %li{:role => 'presentation'}
                = link_to t('general.edit'), edit_track_path(@track), :role => 'menuitem'
              - if can? :destroy, @track
                %li{:role => 'presentation'}
                  = link_to t('general.delete'), @track, :method => :delete, :data => {:confirm => t('.delete_confirmation')}, :role => 'menuitem'

  -#.row
  -#  .col-md-3
  -#    %dl.dl-horizontal
  -#      %dt
  -#        %strong=t '.dt_dist'
  -#      %dd
  -#      %dt
  -#        %strong=t '.dt_elev'
  -#      %dd
  -#      %dt
  -#        %strong=t '.dt_dur'
  -#      %dd
  -#  .col-md-5
  -#    %dl.dl-horizontal
  -#      %dt.d-term
  -#        %strong=t '.dt_hspd'
  -#      %dd#dd_h_speed
  -#
  -#
  -#      %dt.d-term
  -#        %strong=t '.dt_vspd'
  -#      %dd#dd_v_speed
  -#
  -#      %dt
  -#        %strong=t '.dt_gr'
  -#      %dd#dd_gr


  .row
    .col-md-11.col-md-offset-1
      .row
        .col-md-4
          .param-val
            .fa-3x#dd_distance
          .param
            %i.fa.fa-fw.fa-lg.fa-arrows-h
            =t '.dt_dist'
        .col-md-4
          .param-val
            .avg-val.fa-3x#p_avg_h_speed
            .min-max.text-right
              .max-val
                %span#p_max_h_speed
                %i.fa.fa-lg.fa-caret-up
              .min-val
                %span#p_min_h_speed
                %i.fa.fa-lg.fa-caret-down
            .val-unit.fa-3x=t 'units.kmh'
          .param
            %i.fa.fa-fw.fa-lg.fa-long-arrow-right
            =t '.dt_hspd'
        .col-md-4
          .param-val
            .avg-val.fa-3x#p_avg_gr
            .min-max.text-right
              .max-val
                %span#p_max_gr
                %i.fa.fa-lg.fa-caret-up
              .min-val
                %span#p_min_gr
                %i.fa.fa-lg.fa-caret-down
          .param
            %i.fa.fa-fw.fa-lg.fa-ellipsis-h
            =t '.dt_gr'
      .row.top-buffer
        .col-md-4
          .param-val
            .fa-3x#dd_elevation
          .param
            %i.fa.fa-fw.fa-lg.fa-arrows-v
            =t '.dt_elev'
        .col-md-4
          .param-val
            .avg-val.fa-3x#p_avg_v_speed
            .min-max.text-right
              .max-val
                %span#p_max_v_speed
                %i.fa.fa-lg.fa-caret-up
              .min-val
                %span#p_min_v_speed
                %i.fa.fa-lg.fa-caret-down
            .val-unit.fa-3x=t 'units.kmh'
          .param
            %i.fa.fa-fw.fa-lg.fa-long-arrow-down
            =t '.dt_vspd'
        .col-md-4
          .param-val
            .fa-3x#dd_fl_time
          .param
            %i.fa.fa-fw.fa-lg.fa-clock-o
            =t '.dt_dur'

  %hr.top-buffer

  .row#content-row
    .col-sm-12

      #btn-range-edit
        %button.btn.btn-default#range-edit-button{:data => {:toggle => 'modal', :target => '#edit-range'}}
          %i.fa.fa-arrows-h
      #slider-range-selector
        %input#range-selector{:type => 'text', :name => 'range-selector' , :value => ''}

  #multiple-charts
    #glideratio_chart
    #speeds_chart
    #elevation_distance_chart

  #single-chart
    #all_data_chart

  - if @track.comment.present?
    %blockquote
      %small= @track.comment

.modal.fade#edit-range{:tabindex => '-1', :role => 'dialog', :aria => {:labelledby => 'myModalLabel', :hidden => 'true'}}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{:type => 'button', :data => {:dismiss => 'modal'}}
          %span{:aria => {:hidden => 'true'}}
            &times;
          %span.sr-only
            Close
        %h4.modal-title= t('tracks.show.edit_range')

      .modal-body
        .form-inline
          %label.control-label
            = t('tracks.show.range_from')
          %input.form-control#range-from{:type => 'number', :align => 'right'}
          %label.control-label
            = t('tracks.show.range_to')
          %input.form-control#range-to{:type => 'number', :align => 'right'}

      .modal-footer
        %button.btn.btn-default{:type => 'button', :data => {:dismiss => 'modal'}}= t('general.cancel')
        %button.btn.btn-success#apply-new-range{:type => 'button', :data => {:dismiss => 'modal'}}= 'OK'
