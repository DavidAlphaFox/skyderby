- provide :title, "#{t '.title_track' } ##{@track.id} | #{@track.name}"

:javascript

  $(function() {

    // Массив хэшей содержащий данные трека
    var charts_data = #{@track.get_charts_data};
    // Максимальная высота трека
    var max_height = #{@track.get_max_height};
    var min_height = #{@track.get_min_height};

    var param_from = #{@f};
    var param_to = #{@t};

    if (param_from <= param_to || param_from > max_height || param_to >= max_height) {
      param_from = -1;
      param_to = -1;
    }

    if (param_to < min_height) {
      param_to = -1;
    }

    var range_from = param_from == -1 ? max_height : param_from;
    var range_to = param_to == -1 ? min_height : param_to;

    var mft_k = 3.280839895;
    var in_imperial = false;

    var index_cache = [];

    // Clone Function
    function clone(obj) {
      if (null == obj || "object" != typeof obj) return obj;
      var copy = obj.constructor();
      for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
      }
      return copy;
    }

    $('#toggle_multi').click(function(e) {
      e.preventDefault();

      $('#li_toggle_single').removeClass('active');
      $('#li_toggle_multi').addClass('active');

      $('#single-chart').hide();
      $('#multiple-charts').show();
      set_chart_data();
      $.cookie('view_type', 'multi', { expires: 365, path: '/' });
    });

    $('#toggle_single').click(function(e) {
      e.preventDefault();

      $('#li_toggle_single').addClass('active');
      $('#li_toggle_multi').removeClass('active');

      $('#multiple-charts').hide();
      $('#single-chart').show();
      set_chart_data();
      $.cookie('view_type', 'single', { expires: 365, path: '/' });
    });

    $('#toggle_metric').click(function(e) {
      e.preventDefault();

      if ($('#li_toggle_metric').hasClass('active'))
        return;

      $('#li_toggle_metric').addClass('active');
      $('#li_toggle_imperial').removeClass('active');

      in_imperial = false;

      updateRangeSelector();
      updateUnits();
      set_chart_data();
      $.cookie('units', 'metric', { expires: 365, path: '/' });
    });

    $('#toggle_imperial').click(function(e) {
      e.preventDefault();

      if ($('#li_toggle_imperial').hasClass('active'))
        return;

      $('#li_toggle_metric').removeClass('active');
      $('#li_toggle_imperial').addClass('active');

      in_imperial = true;

      updateRangeSelector();
      updateUnits();
      set_chart_data();
      $.cookie('units', 'imperial', { expires: 365, path: '/'});
    });

    $(document).ready(function() {

      $("#range_selector").ionRangeSlider({
        min: max_height,
        max: min_height,
        type: 'double',
        step: 50,
        prettify: false,
        hasGrid: true,
        from: max_height,
        to: 0,
        onFinish: function (obj) {      // callback is called on slider action is finished
          if (in_imperial) {
            range_from = obj.fromNumber / mft_k;
            range_to = obj.toNumber / mft_k;
          } else {
            range_from = obj.fromNumber;
            range_to = obj.toNumber;
          }
          window.history.replaceState({}, document.title, "?f=" + range_from + "&t=" + range_to);
          set_chart_data();
        }
      });

      $('#elevation_distance_chart').highcharts({
        chart: {
          type: 'spline',
          marginLeft: 70
        },
        title: {
          text: #{t '.eldstch_html'}
        },
        plotOptions: {
          series: {
            marker: {
              radius: 1
            },
            point: {
              events: {
                mouseOver: function() {
                    syncTooltip('elevation_distance_chart', this.x);
                  }
              }
            }
          }
        },
        yAxis: {
          min: 0,
          title: {
            text: ''
          }
        },
        tooltip: {
          shared: true,
          crosshairs: true
        },
        credits: {
          enabled: false
        },
        series: [{
          name: #{t '.eldst_el_s_html'},
          pointInterval: 10,
          tooltip: {
            valueSuffix: ''
          }
        },
        {
          name: #{t '.eldst_dst_s_html'},
          pointInterval: 10,
          tooltip: {
            valueSuffix: ''
          }
        },
        {
          name: #{t '.eldst_h_s_html'},
          type: 'area',
          fillOpacity: 0.3,
          color: Highcharts.getOptions().colors[0],
          lineWidth: 1,
          marker: {
              radius: 0
          },
          tooltip: {
            valueSuffix: ''
          }
        }]
      });

      $('#speeds_chart').highcharts({
        chart: {
          type: 'spline',
          marginLeft: 70
        },
        title: {
          text: #{t '.spdch_html'}
        },
        plotOptions: {
          series: {
            marker: {
              enabled: true,
              radius: 1
            },
            point: {
              events: {
                mouseOver: function() {
                    syncTooltip('speeds_chart', this.x);
                  }
              }
            }
          }
        },
        yAxis: [{ //Speed yAxis
          min: 0,
          labels: {
            style: {
              color: Highcharts.getOptions().colors[1]
            }
          },
          title: {
            text: '',
            style: {
              color: Highcharts.getOptions().colors[1]
            }
          }
        }],
        tooltip: {
          shared: true,
          crosshairs: true,
          valueDecimals: 0
        },
        credits: {
          enabled: false
        },
        series: [{
          name: #{t '.spd_hs_html'},
          tooltip: {
            valueSuffix: ''
          }
        },
        {
          name: #{t '.spd_vs_html'},
          tooltip: {
            valueSuffix: ''
          }
        }]
      });

      $('#glideratio_chart').highcharts({
        chart: {
          type: 'spline',
          marginLeft: 70
        },
        title: {
          text: #{t '.grch_html'}
        },
        plotOptions: {
          series: {
            marker: {
              enabled: true,
              radius: 1
            },
            point: {
              events: {
                mouseOver: function() {
                    syncTooltip('glideratio_chart', this.x);
                  }
              }
            }
          }
        },
        tooltip: {
          crosshairs: true,
          valueDecimals: 2
        },
        yAxis: {
          min: 0,
          title: {
            text: ' '
          }
        },
        credits: {
          enabled: false
        },
        series: [{
          name: #{t '.gr_s_html'},
          tooltip: {
            valueSuffix: ''
          }
        }],
        legend: {
          enabled: false,
        }
      });

      $('#all_data_chart').highcharts({
        chart: {
          type: 'spline'
        },
        title: {
          text: #{t '.adc_html'}
        },
        plotOptions: {
          series: {
            marker: {
              enabled: true,
              radius: 1
            }
          }
        },
        yAxis: [{ //Speed yAxis
          min: 0,
          title: {
            text: #{t '.adc_html'}
          }
        },
        { // Elev, dist yAxis
          min: 0,
          title: {
            text: #{t '.adc_ed_y_html'}
          },
          opposite: true
        },
        { // GR yAxis
          min: 0,
          max: 5,
          tickInterval: 0.5,
          title: {
            text: #{t '.adc_gr_y_html'}
          },
          opposite: true
        }
        ],
        tooltip: {
          shared: true,
          crosshairs: true,
        },
        credits: {
          enabled: false
        },
        series: [{
          name: #{t '.adc_hspd_html'},
          yAxis: 0,
          color: Highcharts.getOptions().colors[2],
          tooltip: {
            valueSuffix: '',
            valueDecimals: 0
          }
        },
        {
          name: #{t '.adc_vspd_html'},
          yAxis: 0,
          color: Highcharts.getOptions().colors[0],
          tooltip: {
            valueSuffix: '',
            valueDecimals: 0
          }
        },
        {
          name: #{t '.adc_gr_s_html'},
          yAxis: 2,
          color: Highcharts.getOptions().colors[1],
          tooltip: {
            valueSuffix: '',
            valueDecimals: 2
          }
        },
        {
          name: #{t '.adc_h_s_html'},
          yAxis: 1,
          color: '#aaa',
          tooltip: {
            valueSuffix: '',
            valueDecimals: 0
          }
        },
        {
          name: #{t '.adc_dst_html'},
          yAxis: 1,
          color: Highcharts.getOptions().colors[5],
          tooltip: {
            valueSuffix: '',
            valueDecimals: 0
          }
        },
        {
          name: #{t '.adc_ele_html'},
          yAxis: 1,
          color: Highcharts.getOptions().colors[3],
          tooltip: {
            valueSuffix: '',
            valueDecimals: 0
          }
        }]
      });

      view_type = $.cookie('view_type');
      if (view_type == 'single') {
        $('#li_toggle_single').addClass('active');
        $('#single-chart').show();
        $('#multiple-charts').hide();
      } else {
        $('#li_toggle_multi').addClass('active');
        $('#single-chart').hide();
        $('#multiple-charts').show();
      }

      units = $.cookie('units');
      if (units == 'imperial') {
        $('#li_toggle_imperial').addClass('active');
        in_imperial = true;
      } else {
        $('#li_toggle_metric').addClass('active');
        in_imperial = false;
      }

      set_chart_data();
      updateRangeSelector();
      updateUnits();

    });

    function updateUnits() {

      var speed_unit = (in_imperial ? #{t 'units.mph_html'} : #{t 'units.kmh_html'});
      var dist_unit = (in_imperial ? #{t 'units.ft_html'} : #{t 'units.m_html'});


      $('.val-unit').text(speed_unit);

      // elevation/distance chart
      var chart = $('#elevation_distance_chart').highcharts();
      chart.yAxis[0].update({
        title: {
          text: #{t '.eldst_dst_html'} + ', ' + dist_unit
        }
      });
      chart.series[0].update({
        tooltip: {
          valueSuffix: ' ' + dist_unit,
        },
      });
      chart.series[1].update({
        tooltip: {
          valueSuffix: ' ' + dist_unit,
        },
      });
      chart.series[2].update({
        tooltip: {
          valueSuffix: ' ' + dist_unit,
        },
      });

      // speeds chart
      var chart = $('#speeds_chart').highcharts();
      chart.yAxis[0].update({
        title: {
          text: #{t '.spd_ax_html'} + ', ' + speed_unit
        }
      });
      chart.series[0].update({
        tooltip: {
          valueSuffix: ' ' + speed_unit,
        },
      });
      chart.series[1].update({
        tooltip: {
          valueSuffix: ' ' + speed_unit,
        },
      });

      var chart = $('#all_data_chart').highcharts();
      chart.yAxis[0].update({
        title: {
          text: #{t '.adc_sp_y_html'} + ', ' + (in_imperial ? #{t 'units.mph_html'} : #{t 'units.kmh_html'})
        }
      });
      chart.yAxis[1].update({
        title: {
          text: #{t '.adc_ed_y_html'} + ', ' + (in_imperial ? #{t 'units.ft_html'} : #{t 'units.m_html'})
        }
      });
      chart.series[0].update({
        tooltip: {
          valueSuffix: ' ' + speed_unit,
        },
      });
      chart.series[1].update({
        tooltip: {
          valueSuffix: ' ' + speed_unit,
        },
      });
      chart.series[3].update({
        tooltip: {
          valueSuffix: ' ' + dist_unit,
        },
      });
      chart.series[4].update({
        tooltip: {
          valueSuffix: ' ' + dist_unit,
        },
      });
      chart.series[5].update({
        tooltip: {
          valueSuffix: ' ' + dist_unit,
        },
      });

    }

    function updateRangeSelector() {
      if (in_imperial) {
        $('#range_selector').ionRangeSlider('update', {
            min: Math.round(max_height * mft_k),
            from: Math.round(range_from * mft_k),
            to: Math.round(range_to * mft_k) });
      } else {
        $('#range_selector').ionRangeSlider('update', {
            min: max_height,
            from: range_from,
            to: range_to });
      }
    };

    function syncTooltip(container_id, x) {
      index = index_cache.indexOf(x);

      if (container_id !== 'glideratio_chart') {
        chart = $('#glideratio_chart').highcharts();
        p = chart.series[0].data[index];
        chart.tooltip.refresh(p);
        chart.xAxis[0].drawCrosshair({ chartX: p.plotX, chartY: p.plotY}, p);
      }

      if (container_id !== 'speeds_chart') {
        chart = $('#speeds_chart').highcharts();
        p1 = chart.series[0].data[index];
        chart.tooltip.refresh([p1, chart.series[1].data[index]]);
        chart.xAxis[0].drawCrosshair({ chartX: p1.plotX, chartY: p1.plotY}, p1);
      }

      if (container_id !== 'elevation_distance_chart') {
        chart = $('#elevation_distance_chart').highcharts();
        p1 = chart.series[0].data[index];
        chart.tooltip.refresh([p1, chart.series[1].data[index], chart.series[2].data[index]]);
        chart.xAxis[0].drawCrosshair({ chartX: p1.plotX, chartY: p1.plotY}, p1);
      }

    }

    function set_chart_data() {

      var dist_data = [],
        elev_data = [],
        heights_data = [],
        h_speed = [],
        v_speed = [],
        gr = [],

        avg_h_speed = 0,
        avg_v_speed = 0,
        avg_gr = 0,

        min_h_speed = 0,
        max_h_speed = 0,

        min_v_speed = 0,
        max_v_speed = 0,

        min_gr = 0,
        max_gr = 0,

        fl_time = 0,
        dist = 0,
        elev = 0,

        mft_un_k = 1,
        km_m_k = 1;

      if (in_imperial) {
        mft_un_k = mft_k;
        km_m_k = 1.6093;
      }

      max_val = typeof range_from !== 'undefined' ? range_from : 100000;
      min_val = typeof range_to !== 'undefined' ? range_to : 0;

      index_cache = [];

      var isFirst = true,
          isLast = false;

      for (var index in charts_data) {

        var current_point = charts_data[index];
        var point = {};

        isLast = true;

        if (current_point.elevation <= max_val && current_point.elevation >= min_val) {

          point = clone(current_point);

          // Корректировка выбранного диапазона
          if (isFirst) {

            isFirst = false;
            if (current_point.elevation != max_val && charts_data.hasOwnProperty(index-1)) {

              point.elevation_diff = max_val - current_point.elevation;

              var k = point.elevation_diff / current_point.elevation_diff;

              point.distance = Math.round(current_point.distance * k);
              point.fl_time = Math.round(current_point.fl_time * k * 10) / 10;

            }
          }

          isLast = false;

          dist += point.distance;
          elev += point.elevation_diff;

          elev_data.push([fl_time, Math.round(elev * mft_un_k)]);
          dist_data.push([fl_time, Math.round(dist * mft_un_k)]);
          h_speed.push([fl_time, Math.round(point.h_speed / km_m_k)]);
          v_speed.push([fl_time, Math.round(point.v_speed / km_m_k)]);
          heights_data.push([fl_time, Math.round(point.elevation * mft_un_k)]);
          index_cache.push(fl_time);

          gr.push([fl_time, point.glrat]);

          fl_time += Math.round(point.fl_time * 10) / 10;

          min_h_speed = min_h_speed == 0 || min_h_speed > point.h_speed ? point.h_speed : min_h_speed;
          max_h_speed = max_h_speed == 0 || max_h_speed < point.h_speed ? point.h_speed : max_h_speed;

          min_v_speed = min_v_speed == 0 || min_v_speed > point.v_speed ? point.v_speed : min_v_speed;
          max_v_speed = max_v_speed == 0 || max_v_speed < point.v_speed ? point.v_speed : max_v_speed;

          min_gr = min_gr == 0 || min_gr == null || min_gr > point.glrat ? point.glrat : min_gr;
          max_gr = max_gr == 0 || max_gr == null || max_gr < point.glrat ? point.glrat : max_gr;
        }

        if (isLast && elev_data.length > 0) {
          if (current_point.elevation <= min_val && charts_data.hasOwnProperty(index - 1)) {

            point = clone(current_point);
            prev_point = charts_data[index - 1];

            point.elevation_diff = prev_point.elevation - min_val;
            var k = point.elevation_diff / current_point.elevation_diff;

            point.fl_time = current_point.fl_time * k;
            point.elevation = min_val;
            point.distance = Math.round(current_point.distance * k);

            dist += point.distance;
            elev += point.elevation_diff;
            fl_time += Math.round(point.fl_time * 10) / 10;

            elev_data.push([fl_time, Math.round(elev * mft_un_k)]);
            dist_data.push([fl_time, Math.round(dist * mft_un_k)]);
            h_speed.push([fl_time, Math.round(point.h_speed / km_m_k)]);
            v_speed.push([fl_time, Math.round(point.v_speed / km_m_k)]);
            heights_data.push([fl_time, Math.round(point.elevation * mft_un_k)]);
            index_cache.push(fl_time);

            gr.push([fl_time, point.glrat]);
          }
          break;
        }
      }

      if ($('#multiple-charts').css('display') !== 'none') {
        var ed_chart = $('#elevation_distance_chart').highcharts();
        ed_chart.series[0].setData(elev_data, false);
        ed_chart.series[1].setData(dist_data, false);
        ed_chart.series[2].setData(heights_data, false);
        ed_chart.redraw();
      }

      if ($('#multiple-charts').css('display') !== 'none') {
        var sp_chart = $('#speeds_chart').highcharts();
        sp_chart.series[0].setData(h_speed, false);
        sp_chart.series[1].setData(v_speed, false);
        sp_chart.redraw();
      }

      if ($('#multiple-charts').css('display') !== 'none') {
        var gr_chart = $('#glideratio_chart').highcharts();
        gr_chart.series[0].setData(gr);
      }

      if ($('#all_data_chart').css('display') !== 'none') {
        var ad_chart = $('#all_data_chart').highcharts();
        ad_chart.series[0].setData(h_speed, false);
        ad_chart.series[1].setData(v_speed, false);
        ad_chart.series[2].setData(gr, false);
        ad_chart.series[3].setData(heights_data, false);
        ad_chart.series[4].setData(dist_data, false);
        ad_chart.series[5].setData(elev_data, false);
        ad_chart.redraw();
      }

      if (in_imperial){
        $('#dd_distance').text(Math.round(dist * mft_k) + ' ' + #{t 'units.ft_html'});
        $('#dd_elevation').text((elev * mft_k).toFixed(0) + ' ' + #{t 'units.ft_html'});
      } else {
        $('#dd_distance').text(dist.toFixed(0) + ' ' + #{t 'units.m_html'});
        $('#dd_elevation').text(elev.toFixed(0) + ' ' + #{t 'units.m_html'});
      }
      $('#dd_fl_time').text(fl_time.toFixed(1) + ' ' + #{t 'units.t_html'});

      $('#p_min_v_speed').text((min_v_speed / km_m_k).toFixed(0) + '...');
      $('#p_max_v_speed').text('...' + (max_v_speed / km_m_k).toFixed(0));
      $('#p_avg_v_speed').text(Math.round((elev / fl_time * 3.6) / km_m_k).toString());

      $('#p_min_h_speed').text((min_h_speed / km_m_k).toFixed(0) + '...');
      $('#p_max_h_speed').text('...' + (max_h_speed / km_m_k).toFixed(0));
      $('#p_avg_h_speed').text(Math.round((dist / fl_time * 3.6) / km_m_k).toString());

      $('#p_min_gr').text(min_gr.toFixed(2) + '...');
      $('#p_max_gr').text('...' + max_gr.toFixed(2));
      $('#p_avg_gr').text((dist / elev).toFixed(2));

    }

  });

.container
  .page-header
    .row
      .col-md-10
        %h1
          = "#{@track.name} | #{t '.title_track'} ##{@track.id}"
          %small="#{t '.title_suit'}: #{@track.wingsuit.present? ? @track.wingsuit.name : @track.suit}, @#{@track.location}"

      .dropdown-container.col-md-2
        %button.btn.btn-default
          %i.fa.fa-compass
          = link_to 'Google maps', google_maps_track_path(@track)
        .dropdown
          %button.btn.btn-default.dropdown-toggle#dropdownMenu1{:type => 'button', :data => {:toggle => 'dropdown'}}
            %i.fa.fa-cog
          %ul.dropdown-menu.dropdown-menu-right{:role => 'menu', :aria => {:labelledby => 'dropdownMenu1'}}
            %li.dropdown-header{:role => 'presentation'}=t '.menu_header'
            %li#li_toggle_multi{:role => 'presentation'}
              %a#toggle_multi{:role => 'menuitem', :tabindex => '-1', :href=>'#'}=t '.menu_sep'
            %li#li_toggle_single{:role => 'presentation'}
              %a#toggle_single{:role => 'menuitem', :tabindex => '-1', :href => '#'}=t '.menu_one'
            %li.dropdown-header{:role => 'presentation'}=t '.units_header'
            %li#li_toggle_metric{:role => 'presentation'}
              %a#toggle_metric{:role => 'menuitem', :tabindex => '-1', :href => '#'}=t '.m_units_metric'
            %li#li_toggle_imperial{:role => 'presentation'}
              %a#toggle_imperial{:role => 'menuitem', :tabindex => '-1', :href => '#'}=t '.m_units_imperial'
            - if user_signed_in? && (current_user == @track.user || (can? :update, :tracks))
              %li.dropdown-header{:role => 'presentation'}= t('tracks.show.manage')
              %li{:role => 'presentation'}
                = link_to t('tracks.show.edit'), edit_track_path(@track), :role => 'menuitem'
              - if can? :destroy, @track
                %li{:role => 'presentation'}
                  = link_to t('tracks.show.delete'), @track, :method => :delete, :data => {:confirm => t('.delete_confirmation')}, :role => 'menuitem'

  .row
    .col-md-3
      %dl.dl-horizontal
        %dt
          %strong=t '.dt_dist'
        %dd#dd_distance
        %dt
          %strong=t '.dt_elev'
        %dd#dd_elevation
        %dt
          %strong=t '.dt_dur'
        %dd#dd_fl_time
    .col-md-5
      %dl.dl-horizontal
        %dt.d-term
          %strong=t '.dt_hspd'
        %dd#dd_h_speed
          .min-val#p_min_h_speed
          .avg-val#p_avg_h_speed
          .max-val#p_max_h_speed
          .val-unit=t 'units.kmh'
        %dt.d-term
          %strong=t '.dt_vspd'
        %dd#dd_v_speed
          %p.min-val#p_min_v_speed
          %p.avg-val#p_avg_v_speed
          %p.max-val#p_max_v_speed
          %p.val-unit=t 'units.kmh'
        %dt
          %strong=t '.dt_gr'
        %dd#dd_gr
          %p.min-val#p_min_gr
          %p.avg-val#p_avg_gr
          %p.max-val#p_max_gr

  .top-buffer-10

  .row#content_row
    .range-selector
      %input#range_selector{:type => 'text', :name => 'example_name' , :value => ''}

  #multiple-charts
    #glideratio_chart
    #speeds_chart
    #elevation_distance_chart

  #single-chart
    #all_data_chart

  %blockquote
    %small= @track.comment

