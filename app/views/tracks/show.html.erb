<%- model_class = Track -%>

  <script type="text/javascript" charset="utf-8">

    $(function() { 
        
      // Массив хэшей содержащий данные трека
      var charts_data = <%= @track.get_charts_data %>;
      // Максимальная высота трека
      var max_height = <%= @track.get_max_height %>;
      
      var range_from = max_height;
      var range_to = 0;
      
      // Clone Function
      function clone(obj) {
        if (null == obj || "object" != typeof obj) return obj;
        var copy = obj.constructor();
        for (var attr in obj) {
          if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
      }

      $('#toggle_multi').click(function(e) {
        e.preventDefault();
        $('#single-chart').hide();
        $('#multiple-charts').show();
        set_chart_data();
        $.cookie('view_type', 'multi', { expires: 365, path: '/' });
      });

      $('#toggle_single').click(function(e) {
        e.preventDefault();
        $('#multiple-charts').hide();
        $('#single-chart').show();
        set_chart_data();
        $.cookie('view_type', 'single', { expires: 365, path: '/' });
      });

      $(document).ready(function() {

        $("#range_selector").ionRangeSlider({
          min: max_height,
          max: 0,
          type: 'double',
          step: 50,
          prettify: false,
          hasGrid: true,
          from: max_height,
          to: 0,
          onFinish: function (obj) {      // callback is called on slider action is finished
            range_from = obj.fromNumber;
            range_to = obj.toNumber;
            set_chart_data();
          }
        });

        $('#elevation_distance_chart').highcharts({
          chart: {
            type: 'spline',
            marginLeft: 70
          },
          title: {
            text: <%=t :tsh_eldstch_html %>
          },
          plotOptions: {
            series: {
              marker: {
                radius: 1
              }
            }
          },
          yAxis: {
            min: 0,
            title: {
              text: <%=t :tsh_eldst_dst_html %>
            }
          },
          tooltip: {
            shared: true,
            crosshairs: true,
            valueSuffix: ' m'
          },
          credits: {
            enabled: false
          },
          series: [{
            name: <%=t :tsh_eldst_el_s_html %>,
            pointInterval: 10,
          },
          {
            name: <%=t :tsh_eldst_dst_s_html %>,
            pointInterval: 10
          },
          {
            name: <%=t :tsh_eldst_h_s_html %>,
            type: 'area',
            fillOpacity: 0.3,
            color: Highcharts.getOptions().colors[0],
            lineWidth: 1,
            marker: {
                radius: 0
            }
          }]  
        });

        $('#speeds_chart').highcharts({
          chart: {
            type: 'spline',
            marginLeft: 70
          },
          title: {
            text: <%=t :tsh_spdch_html %>
          },
          plotOptions: {
            series: {
              marker: {
                enabled: true,
                radius: 1
              }
            }
          },
          yAxis: [{ //Speed yAxis
            min: 0,
            labels: {
              style: { 
                color: Highcharts.getOptions().colors[1]
              }
            },
            title: {
              text: <%=t :tsh_spd_ax_html %>,
              style: {
                color: Highcharts.getOptions().colors[1]
              }
            }
          }],
          tooltip: {
            shared: true,
            crosshairs: true,
            valueDecimals: 2
          },
          credits: {
            enabled: false
          },
          series: [{
            name: <%=t :tsh_spd_hs_html %>
          },
          {
            name: <%=t :tsh_spd_vs_html %>
          }]
        });

        $('#glideratio_chart').highcharts({
          chart: {
            type: 'spline',
            marginLeft: 70
          },
          title: {
            text: <%=t :tsh_grch_html %>
          },
          plotOptions: {
            series: {
              marker: {
                enabled: true,
                radius: 1
              },
            }
          },
          tooltip: {
            crosshairs: true,
            valueDecimals: 2
          },
          yAxis: {
            min: 0,
            title: {
              text: ' ' 
            }
          },
          credits: {
            enabled: false
          },
          series: [{
            name: <%=t :tsh_gr_s_html %>
          }],
          legend: {
            enabled: false,
          }
        });

        $('#all_data_chart').highcharts({
          chart: {
            type: 'spline'
          },
          title: {
            text: <%=t :tsh_adc_html %>
          },
          plotOptions: {
            series: {
              marker: {
                enabled: true,
                radius: 1
              }
            }
          },
          yAxis: [{ //Speed yAxis
            min: 0,
            title: {
              text: <%=t :tsh_adc_html %>
            }
          },
          { // Elev, dist yAxis
            min: 0,
            tickInterval: 500,
            title: {
              text: <%=t :tsh_adc_ed_y_html %>
            },
            opposite: true
          },
          { // GR yAxis
            min: 0,
            max: 5,
            tickInterval: 0.5,
            title: {
              text: <%=t :tsh_adc_gr_y_html %>
            },
            opposite: true
          }
          ],
          tooltip: {
            shared: true,
            crosshairs: true,
            valueDecimals: 2
          },
          credits: {
            enabled: false
          },
          series: [{
            name: <%=t :tsh_adc_hspd_html %>,
            yAxis: 0,
            color: Highcharts.getOptions().colors[2]
          },
          {
            name: <%=t :tsh_adc_vspd_html %>,
            yAxis: 0,
            color: Highcharts.getOptions().colors[0]
          },
          {
            name: <%=t :tsh_adc_gr_s_html %>,
            yAxis: 2,
            color: Highcharts.getOptions().colors[1]
          },
          {
            name: <%=t :tsh_adc_h_s_html %>,
            yAxis: 1,
            color: '#aaa'
          },
          {
            name: <%=t :tsh_adc_dst_html %>,
            yAxis: 1,
            color: Highcharts.getOptions().colors[5]
          },
          {
            name: <%=t :tsh_adc_ele_html %>,
            yAxis: 1,
            color: Highcharts.getOptions().colors[3]
          }]
        });

        set_chart_data();

        view_type = $.cookie('view_type');
        if (view_type == 'single') {
          $('#single-chart').show();
          $('#multiple-charts').hide();
        } else {
          $('#single-chart').hide();
          $('#multiple-charts').show();
        }

      });

      function set_chart_data() {

        var dist_data = [],
          elev_data = [],
          heights_data = [],
          h_speed = [],
          v_speed = [],
          gr = [],

          avg_h_speed = 0,
          avg_v_speed = 0,
          avg_gr = 0,

          min_h_speed = 0,
          max_h_speed = 0,

          min_v_speed = 0,
          max_v_speed = 0,

          min_gr = 0,
          max_gr = 0,

          fl_time = 0,
          dist = 0,
          elev = 0;

        max_val = typeof range_from !== 'undefined' ? range_from : 100000;
        min_val = typeof range_to !== 'undefined' ? range_to : 0;

        var isFirst = true,
            isLast = false;

        for (var index in charts_data) {
          
          var current_point = charts_data[index];
          var point = {};

          isLast = true;

          if (current_point.elevation <= max_val && current_point.elevation >= min_val) {

            point = clone(current_point);

            // Корректировка выбранного диапазона
            if (isFirst) {
            
              isFirst = false;
              if (current_point.elevation != max_val && charts_data.hasOwnProperty(index-1)) {

                point.elevation_diff = max_val - current_point.elevation;
                
                var k = point.elevation_diff / current_point.elevation_diff;

                point.distance = Math.round(current_point.distance * k);
                point.fl_time = Math.round(current_point.fl_time * k);
              }
            }

            isLast = false;

            dist += point.distance;
            elev += point.elevation_diff;

            elev_data.push([fl_time, Math.round(elev)]);
            dist_data.push([fl_time, dist]);

            heights_data.push([fl_time, Math.round(point.elevation)]);
            h_speed.push([fl_time, point.h_speed]);
            v_speed.push([fl_time, point.v_speed]);

            gr.push([fl_time, point.glrat]);

            fl_time += point.fl_time;

            min_h_speed = min_h_speed == 0 || min_h_speed > point.h_speed ? point.h_speed : min_h_speed;
            max_h_speed = max_h_speed == 0 || max_h_speed < point.h_speed ? point.h_speed : max_h_speed;

            min_v_speed = min_v_speed == 0 || min_v_speed > point.v_speed ? point.v_speed : min_v_speed;
            max_v_speed = max_v_speed == 0 || max_v_speed < point.v_speed ? point.v_speed : max_v_speed;
            
            min_gr = min_gr == 0 || min_gr > point.glrat ? point.glrat : min_gr;
            max_gr = max_gr == 0 || max_gr < point.glrat ? point.glrat : max_gr;
          }

          if (isLast && elev_data.length > 0) {
            if (current_point.elevation <= min_val && charts_data.hasOwnProperty(index - 1)) {

              point = clone(current_point);
              prev_point = charts_data[index - 1];

              point.elevation_diff = prev_point.elevation - min_val;
              var k = point.elevation_diff / current_point.elevation_diff;

              point.fl_time = current_point.fl_time * k;
              point.elevation = min_val;
              point.distance = Math.round(current_point.distance * k);

              dist += point.distance;
              elev += point.elevation_diff;

              elev_data.push([fl_time, Math.round(elev)]);
              dist_data.push([fl_time, dist]);

              heights_data.push([fl_time, Math.round(point.elevation)]);
              h_speed.push([fl_time, point.h_speed]);
              v_speed.push([fl_time, point.v_speed]);

              gr.push([fl_time, point.glrat]);
            }
            break;
          }
        }
 
        if ($('#elevation_distance_chart').css('display') !== 'none') {
          var ed_chart = $('#elevation_distance_chart').highcharts();
          ed_chart.series[0].setData(elev_data, false);
          ed_chart.series[1].setData(dist_data, false);
          ed_chart.series[2].setData(heights_data, false);
          ed_chart.redraw();
        }

        if ($('#speeds_chart').css('display') !== 'none') {
          var sp_chart = $('#speeds_chart').highcharts();
          sp_chart.series[0].setData(h_speed, false);
          sp_chart.series[1].setData(v_speed, false);
          sp_chart.redraw();
        }

        if ($('#glideratio_chart').css('display') !== 'none') {
          var gr_chart = $('#glideratio_chart').highcharts();
          gr_chart.series[0].setData(gr);
        }

        if ($('#all_data_chart').css('display') !== 'none') {
          var ad_chart = $('#all_data_chart').highcharts();
          ad_chart.series[0].setData(h_speed, false);
          ad_chart.series[1].setData(v_speed, false);
          ad_chart.series[2].setData(gr, false);
          ad_chart.series[3].setData(heights_data, false);
          ad_chart.series[4].setData(dist_data, false);
          ad_chart.series[5].setData(elev_data, false);
          ad_chart.redraw();
        }

        $('#dd_distance').text(dist.toString() + ' м');
        $('#dd_elevation').text(elev.toFixed(0) + ' м');
        $('#dd_fl_time').text(fl_time.toString() + ' с');
        
        $('#p_min_v_speed').text(min_v_speed.toFixed(0) + '...');
        $('#p_max_v_speed').text('...' + max_v_speed.toFixed(0));
        $('#p_avg_v_speed').text(Math.round(elev / fl_time * 3.6).toString());
        
        $('#p_min_h_speed').text(min_h_speed.toFixed(0) + '...');
        $('#p_max_h_speed').text('...' + max_h_speed.toFixed(0));
        $('#p_avg_h_speed').text(Math.round(dist / fl_time * 3.6).toString());

        $('#p_min_gr').text(min_gr.toFixed(2) + '...');
        $('#p_max_gr').text('...' + max_gr.toFixed(2));
        $('#p_avg_gr').text((dist / elev).toFixed(2));

      };
      
    });

  </script>


  <div class="page-header">
    <div class="row">
      <div class="col-md-11">
        <h1><%= @track.name %> | <%=t :tsh_title_track %> #<%= @track.id %> <small><%=t :tsh_title_suit %>: <%= @track.suit %></small></h1>
      </div>
      <div class="dropdown-container col-md-1">
        <div class="dropdown">
          <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown">
            <span class="glyphicon glyphicon-cog"></span>
          </button>
          <ul class="dropdown-menu dropdown-menu-right" role="menu" aria-labelledby="dropdownMenu1">
            <li role="presentation" class="dropdown-header"><%=t :tsh_menu_header %></li>
            <li role="presentation"><a id="toggle_multi" role="menuitem" tabindex="-1" href=""><%=t :tsh_menu_sep %></a></li>
            <li role="presentation"><a id="toggle_single" role="menuitem" tabindex="-1" href=""><%=t :tsh_menu_one %></a></li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-3">
      <dl class="dl-horizontal">
        <dt><strong><%=t :tsh_dt_dist %></strong></dt>
        <dd id="dd_distance"></dd>
        <dt><strong><%=t :tsh_dt_elev %></strong></dt>
        <dd id="dd_elevation"></dd>
        <dt><strong><%=t :tsh_dt_dur %></strong></dt>
        <dd id="dd_fl_time"></dd>
      </dl>
    </div>
    <div class="col-md-5">
      <dl class="dl-horizontal">
        <dt class="d-term"><strong><%=t :tsh_dt_hspd %></strong></dt>
        <dd id="dd_h_speed">
          <div id="p_min_h_speed" class="min-val"></div>
          <div id="p_avg_h_speed" class="avg-val"></div>
          <div id="p_max_h_speed" class="max-val"></div>
          <div class="val-unit"> <%=t :kmh_unit %></div>
        </dd>
        <dt class="d-term"><strong><%=t :tsh_dt_vspd %></strong></dt>
        <dd id="dd_v_speed">
          <p id="p_min_v_speed" class="min-val"></p>
          <p id="p_avg_v_speed" class="avg-val"></p>
          <p id="p_max_v_speed" class="max-val"></p>
          <p class="val-unit"> <%=t :kmh_unit %></p>
        </dd>
        <dt><strong><%=t :tsh_dt_gr %></strong></dt>
        <dd id="dd_gr">
          <p id="p_min_gr" class="min-val"></p>
          <p id="p_avg_gr" class="avg-val"></p>
          <p id="p_max_gr" class="max-val"></p>
        </dd>
      </dl>
    </div>
  </div>

  <div style="margin-top: 10px;"></div>

  <div id="content_row" class="row">
    <div class="" style="float:none;margin-left:auto;margin-right:auto;width:97%">
      <input type="text" id="range_selector" name="example_name" value="" />
    </div>
  </div>

  <div id="multiple-charts">
    <div id="glideratio_chart" style="width:100%; height:250px"></div>
    <div id="speeds_chart" style="width:100%; height:400px;"></div>
    <div id="elevation_distance_chart" style="width:100%; height:400px;"></div>
  </div>
  <div id="single-chart">
    <div id="all_data_chart" style="width:100%; height:600px"></div>
  </div>

  <blockquote>
    <small><%= @track.comment %></small>
  </blockquote> 

